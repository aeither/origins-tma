/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createServerRootRoute } from '@tanstack/react-start/server'

import { Route as rootRouteImport } from './routes/__root'
import { Route as RewardContractRouteImport } from './routes/reward-contract'
import { Route as PlaygroundRouteImport } from './routes/playground'
import { Route as HelloWorldRouteImport } from './routes/hello-world'
import { Route as IndexRouteImport } from './routes/index'
import { Route as QuizQuizIdRouteImport } from './routes/quiz.$quizId'
import { Route as QuizQuizIdClaimRouteImport } from './routes/quiz.$quizId.claim'
import { Route as DemoStartServerFuncsRouteImport } from './routes/demo.start.server-funcs'
import { Route as DemoStartApiRequestRouteImport } from './routes/demo.start.api-request'
import { ServerRoute as ApiDemoNamesServerRouteImport } from './routes/api.demo-names'

const rootServerRouteImport = createServerRootRoute()

const RewardContractRoute = RewardContractRouteImport.update({
  id: '/reward-contract',
  path: '/reward-contract',
  getParentRoute: () => rootRouteImport,
} as any)
const PlaygroundRoute = PlaygroundRouteImport.update({
  id: '/playground',
  path: '/playground',
  getParentRoute: () => rootRouteImport,
} as any)
const HelloWorldRoute = HelloWorldRouteImport.update({
  id: '/hello-world',
  path: '/hello-world',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const QuizQuizIdRoute = QuizQuizIdRouteImport.update({
  id: '/quiz/$quizId',
  path: '/quiz/$quizId',
  getParentRoute: () => rootRouteImport,
} as any)
const QuizQuizIdClaimRoute = QuizQuizIdClaimRouteImport.update({
  id: '/claim',
  path: '/claim',
  getParentRoute: () => QuizQuizIdRoute,
} as any)
const DemoStartServerFuncsRoute = DemoStartServerFuncsRouteImport.update({
  id: '/demo/start/server-funcs',
  path: '/demo/start/server-funcs',
  getParentRoute: () => rootRouteImport,
} as any)
const DemoStartApiRequestRoute = DemoStartApiRequestRouteImport.update({
  id: '/demo/start/api-request',
  path: '/demo/start/api-request',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiDemoNamesServerRoute = ApiDemoNamesServerRouteImport.update({
  id: '/api/demo-names',
  path: '/api/demo-names',
  getParentRoute: () => rootServerRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/hello-world': typeof HelloWorldRoute
  '/playground': typeof PlaygroundRoute
  '/reward-contract': typeof RewardContractRoute
  '/quiz/$quizId': typeof QuizQuizIdRouteWithChildren
  '/demo/start/api-request': typeof DemoStartApiRequestRoute
  '/demo/start/server-funcs': typeof DemoStartServerFuncsRoute
  '/quiz/$quizId/claim': typeof QuizQuizIdClaimRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/hello-world': typeof HelloWorldRoute
  '/playground': typeof PlaygroundRoute
  '/reward-contract': typeof RewardContractRoute
  '/quiz/$quizId': typeof QuizQuizIdRouteWithChildren
  '/demo/start/api-request': typeof DemoStartApiRequestRoute
  '/demo/start/server-funcs': typeof DemoStartServerFuncsRoute
  '/quiz/$quizId/claim': typeof QuizQuizIdClaimRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/hello-world': typeof HelloWorldRoute
  '/playground': typeof PlaygroundRoute
  '/reward-contract': typeof RewardContractRoute
  '/quiz/$quizId': typeof QuizQuizIdRouteWithChildren
  '/demo/start/api-request': typeof DemoStartApiRequestRoute
  '/demo/start/server-funcs': typeof DemoStartServerFuncsRoute
  '/quiz/$quizId/claim': typeof QuizQuizIdClaimRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/hello-world'
    | '/playground'
    | '/reward-contract'
    | '/quiz/$quizId'
    | '/demo/start/api-request'
    | '/demo/start/server-funcs'
    | '/quiz/$quizId/claim'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/hello-world'
    | '/playground'
    | '/reward-contract'
    | '/quiz/$quizId'
    | '/demo/start/api-request'
    | '/demo/start/server-funcs'
    | '/quiz/$quizId/claim'
  id:
    | '__root__'
    | '/'
    | '/hello-world'
    | '/playground'
    | '/reward-contract'
    | '/quiz/$quizId'
    | '/demo/start/api-request'
    | '/demo/start/server-funcs'
    | '/quiz/$quizId/claim'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  HelloWorldRoute: typeof HelloWorldRoute
  PlaygroundRoute: typeof PlaygroundRoute
  RewardContractRoute: typeof RewardContractRoute
  QuizQuizIdRoute: typeof QuizQuizIdRouteWithChildren
  DemoStartApiRequestRoute: typeof DemoStartApiRequestRoute
  DemoStartServerFuncsRoute: typeof DemoStartServerFuncsRoute
}
export interface FileServerRoutesByFullPath {
  '/api/demo-names': typeof ApiDemoNamesServerRoute
}
export interface FileServerRoutesByTo {
  '/api/demo-names': typeof ApiDemoNamesServerRoute
}
export interface FileServerRoutesById {
  __root__: typeof rootServerRouteImport
  '/api/demo-names': typeof ApiDemoNamesServerRoute
}
export interface FileServerRouteTypes {
  fileServerRoutesByFullPath: FileServerRoutesByFullPath
  fullPaths: '/api/demo-names'
  fileServerRoutesByTo: FileServerRoutesByTo
  to: '/api/demo-names'
  id: '__root__' | '/api/demo-names'
  fileServerRoutesById: FileServerRoutesById
}
export interface RootServerRouteChildren {
  ApiDemoNamesServerRoute: typeof ApiDemoNamesServerRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/reward-contract': {
      id: '/reward-contract'
      path: '/reward-contract'
      fullPath: '/reward-contract'
      preLoaderRoute: typeof RewardContractRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/playground': {
      id: '/playground'
      path: '/playground'
      fullPath: '/playground'
      preLoaderRoute: typeof PlaygroundRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/hello-world': {
      id: '/hello-world'
      path: '/hello-world'
      fullPath: '/hello-world'
      preLoaderRoute: typeof HelloWorldRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/quiz/$quizId': {
      id: '/quiz/$quizId'
      path: '/quiz/$quizId'
      fullPath: '/quiz/$quizId'
      preLoaderRoute: typeof QuizQuizIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/quiz/$quizId/claim': {
      id: '/quiz/$quizId/claim'
      path: '/claim'
      fullPath: '/quiz/$quizId/claim'
      preLoaderRoute: typeof QuizQuizIdClaimRouteImport
      parentRoute: typeof QuizQuizIdRoute
    }
    '/demo/start/server-funcs': {
      id: '/demo/start/server-funcs'
      path: '/demo/start/server-funcs'
      fullPath: '/demo/start/server-funcs'
      preLoaderRoute: typeof DemoStartServerFuncsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/demo/start/api-request': {
      id: '/demo/start/api-request'
      path: '/demo/start/api-request'
      fullPath: '/demo/start/api-request'
      preLoaderRoute: typeof DemoStartApiRequestRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}
declare module '@tanstack/react-start/server' {
  interface ServerFileRoutesByPath {
    '/api/demo-names': {
      id: '/api/demo-names'
      path: '/api/demo-names'
      fullPath: '/api/demo-names'
      preLoaderRoute: typeof ApiDemoNamesServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
  }
}

interface QuizQuizIdRouteChildren {
  QuizQuizIdClaimRoute: typeof QuizQuizIdClaimRoute
}

const QuizQuizIdRouteChildren: QuizQuizIdRouteChildren = {
  QuizQuizIdClaimRoute: QuizQuizIdClaimRoute,
}

const QuizQuizIdRouteWithChildren = QuizQuizIdRoute._addFileChildren(
  QuizQuizIdRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  HelloWorldRoute: HelloWorldRoute,
  PlaygroundRoute: PlaygroundRoute,
  RewardContractRoute: RewardContractRoute,
  QuizQuizIdRoute: QuizQuizIdRouteWithChildren,
  DemoStartApiRequestRoute: DemoStartApiRequestRoute,
  DemoStartServerFuncsRoute: DemoStartServerFuncsRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
const rootServerRouteChildren: RootServerRouteChildren = {
  ApiDemoNamesServerRoute: ApiDemoNamesServerRoute,
}
export const serverRouteTree = rootServerRouteImport
  ._addFileChildren(rootServerRouteChildren)
  ._addFileTypes<FileServerRouteTypes>()
