/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as UpdateInvoiceRouteImport } from './routes/update-invoice'
import { Route as RewardContractRouteImport } from './routes/reward-contract'
import { Route as PlaygroundRouteImport } from './routes/playground'
import { Route as CounterRouteImport } from './routes/counter'
import { Route as IndexRouteImport } from './routes/index'
import { Route as DemoStartServerFuncsRouteImport } from './routes/demo.start.server-funcs'
import { Route as DemoStartApiRequestRouteImport } from './routes/demo.start.api-request'

const UpdateInvoiceRoute = UpdateInvoiceRouteImport.update({
  id: '/update-invoice',
  path: '/update-invoice',
  getParentRoute: () => rootRouteImport,
} as any)
const RewardContractRoute = RewardContractRouteImport.update({
  id: '/reward-contract',
  path: '/reward-contract',
  getParentRoute: () => rootRouteImport,
} as any)
const PlaygroundRoute = PlaygroundRouteImport.update({
  id: '/playground',
  path: '/playground',
  getParentRoute: () => rootRouteImport,
} as any)
const CounterRoute = CounterRouteImport.update({
  id: '/counter',
  path: '/counter',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const DemoStartServerFuncsRoute = DemoStartServerFuncsRouteImport.update({
  id: '/demo/start/server-funcs',
  path: '/demo/start/server-funcs',
  getParentRoute: () => rootRouteImport,
} as any)
const DemoStartApiRequestRoute = DemoStartApiRequestRouteImport.update({
  id: '/demo/start/api-request',
  path: '/demo/start/api-request',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/counter': typeof CounterRoute
  '/playground': typeof PlaygroundRoute
  '/reward-contract': typeof RewardContractRoute
  '/update-invoice': typeof UpdateInvoiceRoute
  '/demo/start/api-request': typeof DemoStartApiRequestRoute
  '/demo/start/server-funcs': typeof DemoStartServerFuncsRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/counter': typeof CounterRoute
  '/playground': typeof PlaygroundRoute
  '/reward-contract': typeof RewardContractRoute
  '/update-invoice': typeof UpdateInvoiceRoute
  '/demo/start/api-request': typeof DemoStartApiRequestRoute
  '/demo/start/server-funcs': typeof DemoStartServerFuncsRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/counter': typeof CounterRoute
  '/playground': typeof PlaygroundRoute
  '/reward-contract': typeof RewardContractRoute
  '/update-invoice': typeof UpdateInvoiceRoute
  '/demo/start/api-request': typeof DemoStartApiRequestRoute
  '/demo/start/server-funcs': typeof DemoStartServerFuncsRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/counter'
    | '/playground'
    | '/reward-contract'
    | '/update-invoice'
    | '/demo/start/api-request'
    | '/demo/start/server-funcs'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/counter'
    | '/playground'
    | '/reward-contract'
    | '/update-invoice'
    | '/demo/start/api-request'
    | '/demo/start/server-funcs'
  id:
    | '__root__'
    | '/'
    | '/counter'
    | '/playground'
    | '/reward-contract'
    | '/update-invoice'
    | '/demo/start/api-request'
    | '/demo/start/server-funcs'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  CounterRoute: typeof CounterRoute
  PlaygroundRoute: typeof PlaygroundRoute
  RewardContractRoute: typeof RewardContractRoute
  UpdateInvoiceRoute: typeof UpdateInvoiceRoute
  DemoStartApiRequestRoute: typeof DemoStartApiRequestRoute
  DemoStartServerFuncsRoute: typeof DemoStartServerFuncsRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/update-invoice': {
      id: '/update-invoice'
      path: '/update-invoice'
      fullPath: '/update-invoice'
      preLoaderRoute: typeof UpdateInvoiceRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/reward-contract': {
      id: '/reward-contract'
      path: '/reward-contract'
      fullPath: '/reward-contract'
      preLoaderRoute: typeof RewardContractRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/playground': {
      id: '/playground'
      path: '/playground'
      fullPath: '/playground'
      preLoaderRoute: typeof PlaygroundRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/counter': {
      id: '/counter'
      path: '/counter'
      fullPath: '/counter'
      preLoaderRoute: typeof CounterRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/demo/start/server-funcs': {
      id: '/demo/start/server-funcs'
      path: '/demo/start/server-funcs'
      fullPath: '/demo/start/server-funcs'
      preLoaderRoute: typeof DemoStartServerFuncsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/demo/start/api-request': {
      id: '/demo/start/api-request'
      path: '/demo/start/api-request'
      fullPath: '/demo/start/api-request'
      preLoaderRoute: typeof DemoStartApiRequestRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  CounterRoute: CounterRoute,
  PlaygroundRoute: PlaygroundRoute,
  RewardContractRoute: RewardContractRoute,
  UpdateInvoiceRoute: UpdateInvoiceRoute,
  DemoStartApiRequestRoute: DemoStartApiRequestRoute,
  DemoStartServerFuncsRoute: DemoStartServerFuncsRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { createStart } from '@tanstack/react-start'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
